/**********************************************************************
** Goal: Provide various monitors to track stuff. 
*/


// https://www.spaceengineerswiki.com/Programming_Guide
// https://spaceengineers.fandom.com/wiki/Scripting
// https://bloc97.github.io/SpaceEngineersModAPIDocs/html/b2d609dc-672a-3d90-cdc0-3753ce60d06f.htm

// https://bloc97.github.io/SpaceEngineersModAPIDocs/html/817acec2-8550-f411-f8f8-74d022ec92e0.htm
// https://bloc97.github.io/SpaceEngineersModAPIDocs/html/3ff256ac-5b97-9c75-1cb9-caac4f4e6bb0.htm

// https://steamcommunity.com/sharedfiles/filedetails/?id=407158161
// https://forum.keenswh.com/threads/new-camera-raycast-and-sensor-api-update-01-162-dev.7389290/
// https://steamcommunity.com/sharedfiles/filedetails/?id=1708912916
// https://steamcommunity.com/app/244850/discussions/0/1736633446494771652/

internal class TagInfo { 
   public string Name {get; set;} = "";
   public List<string> Params {get; set;} = new List<string>();
}


// note: tags must be all caps
private const string WATCH_TAG          = "WATCH";
private const string DISPLAY_TAG        = "DISPLAY";
private const string CLEARDISPLAY_TAG   = "CLEARDISPLAY";
private const string DRILLPROGRAM_TAG   = "DRILLPROGRAM";

// note: params are not limited to caps
private const string PARAM_POWER        = "POWER";
private const string PARAM_CARGO        = "CARGO";
private const string PARAM_DRILLPROGRAM = "DRILLPROGRAM";


private const string FONT_STYLE_RED     = "Red";
private const string FONT_STYLE_GREEN   = "Green";
private const string FONT_STYLE_BLUE    = "Blue";
private const string FONT_STYLE_WHITE   = "White";
private const float  FONT_SIZE          = 0.85f;

private const float SOLAR_PANEL_MAX     = 0.12f; 

private const string BREAKLINE          = "---------------------------------------------------";


public Program() {
   Runtime.UpdateFrequency = UpdateFrequency.Update10; // 60 ticks = 1 second
}

static int tweaker = 0;
static bool ActiveDrillProgram = false;

public void Main(string argument, UpdateType updateSource) {
   List<IMyTerminalBlock> watchedBlocks      = findBlockTags(WATCH_TAG);
   List<IMyTerminalBlock> displayBlocks      = findBlockTags(DISPLAY_TAG);
   List<IMyTerminalBlock> drillProgramBlocks = findBlockTags(DRILLPROGRAM_TAG);
   List<string> DebugLog                     = new List<string>();

   DebugLog.Add($"Watched Blocks: {watchedBlocks.Count}");
   DebugLog.Add($"Display Blocks: {displayBlocks.Count}");
   DebugLog.Add($"Drill Program Blocks: {drillProgramBlocks.Count}");
   DebugLog.Add(BREAKLINE);

   // program actions
   if(ActiveDrillProgram) { // TODO: Don't do this unless we have a drill program thingie going
      IEnumerable<IMyShipDrill>           drills    = drillProgramBlocks.OfType<IMyShipDrill>();
      IEnumerable<IMyPistonBase>          pistons   = drillProgramBlocks.OfType<IMyPistonBase>();
      IEnumerable<IMyMotorAdvancedStator> rotors    = drillProgramBlocks.OfType<IMyMotorAdvancedStator>();
      IMyMotorAdvancedStator              mainRotor = rotors.FirstOrDefault();

      foreach(IMyShipDrill drill in drills) {
         drill.Enabled = ActiveDrillProgram; // make sure all drills are active
      }

      double rotoDegrees = (mainRotor.Angle * (180 / Math.PI));
      IMyPistonBase tweakerPiston = pistons.Where(p => p.CustomName == "Platform - Piston (Tweaker)").FirstOrDefault();
      if(rotoDegrees <= 1.0f) {
         tweaker++;
         tweakerPiston.MaxLimit += 0.5f;
         if(tweakerPiston.MaxLimit >= 10.0f) {
            ActiveDrillProgram = false;
            Echo($"Stopping: {tweaker}; {tweakerPiston.CurrentPosition}; {tweakerPiston.MaxLimit};");
         } else {
            Echo($"Move: {tweaker}; {tweakerPiston.CurrentPosition}; {tweakerPiston.MaxLimit};");
         }
      } else {
         Echo($"Stay: {tweaker}; {tweakerPiston.CurrentPosition}; {tweakerPiston.MaxLimit};");
      }

   } else {
      Echo($"Inactive Drill Program");
   }

   // display actions
   foreach(var display in displayBlocks) {
      foreach(TagInfo tag in ParseTag(display.CustomData)) {
         if(tag != null) {
            switch(tag.Name.ToUpper().Trim()) {
               case DISPLAY_TAG:
		  if(display is IMyCockpit) {
                  	DebugLog = ProcessDisplayTag(tag, watchedBlocks, drillProgramBlocks, (IMyCockpit)display, DebugLog);
                  }

		  if(display is IMyTextSurface) {
                  	DebugLog = ProcessDisplayTag(tag, watchedBlocks, drillProgramBlocks, (IMyTextSurface)display, DebugLog);
                  }
                  break;

               case CLEARDISPLAY_TAG:
                  DebugLog = ProcessClearDisplayTag(tag, watchedBlocks, (IMyCockpit)display, DebugLog);
                  break;

            }
         } else {
            DebugLog.Add($"ParseTag failed.");
            DebugLog.Add(BREAKLINE);
         }
      }
   }

   // show debug info
   foreach(string item in DebugLog) {
      Echo(item);
   }
}

private List<string> ProcessDisplayTag(TagInfo tag, List<IMyTerminalBlock> watchedBlocks, List<IMyTerminalBlock> drillProgramBlocks, IMyCockpit display, List<string> DebugLog) {
   int    TagParamDisp = ( tag.Params.Count() >=1 ? int.Parse(tag.Params[0])       : 0  ); // TODO: To Fragle, account for alpha chars
   string TagParamType = ( tag.Params.Count() >=2 ? tag.Params[1].ToUpper().Trim() : "" );
   
   return ProcessDisplayTag(tag, watchedBlocks, drillProgramBlocks, display.GetSurface(TagParamDisp), DebugLog, TagParamType);
}

private List<string> ProcessDisplayTag(TagInfo tag, List<IMyTerminalBlock> watchedBlocks, List<IMyTerminalBlock> drillProgramBlocks, IMyTextSurface display, List<string> DebugLog, string TagParamType = null) {
   string displayText;
   if(TagParamType == null) {
      TagParamType = ( tag.Params.Count()>=1 ? tag.Params[0].ToUpper().Trim() : "" );
   }

   switch(TagParamType) {
      case PARAM_POWER:
         displayText = populatePowerDisplayText(watchedBlocks);
         bool IsPowerStable = isPowerStable(watchedBlocks);
         PopulateDisplay(display, displayText, (IsPowerStable ? FONT_STYLE_GREEN : FONT_STYLE_RED ) );

         DebugLog.Add($"Is Power Stable: {IsPowerStable}");
         break;

      case PARAM_CARGO:
         displayText = populateCargoDisplayText(watchedBlocks);
         PopulateDisplay(display, displayText, FONT_STYLE_WHITE); 
         break;

      case PARAM_DRILLPROGRAM:
         displayText = populateDrillProgramDisplayText(drillProgramBlocks);
         PopulateDisplay(display, displayText, FONT_STYLE_WHITE); 
         break;
   }

   DebugLog.Add(BREAKLINE);
   return DebugLog;
}


private List<string> ProcessClearDisplayTag(TagInfo tag, List<IMyTerminalBlock> watchedBlocks, IMyCockpit display, List<string> DebugLog) {
   int idxStart    = ( tag.Params.Count() >=1 ? int.Parse(tag.Params[0]) : -1 ); // TODO: To Fragle, account for alpha chars
   int idxEnd      = ( tag.Params.Count() >=2 ? int.Parse(tag.Params[1]) : -1 ); // TODO: To Fragle, account for alpha chars
   int numDisplays = display.SurfaceCount;

   if(idxStart >= 0 && idxEnd >= 0 ) {
      for(int i = idxStart; i<= idxEnd; i++) {
         PopulateDisplay(display.GetSurface(i), "", FONT_STYLE_WHITE); 
      }
   } else {
      for(int i = 0; i< numDisplays; i++) {
         PopulateDisplay(display.GetSurface(i), "", FONT_STYLE_WHITE); 
      }
   }

   DebugLog.Add($"Clearning Surfaces {display.SurfaceCount}");
   DebugLog.Add(BREAKLINE);
   return DebugLog;
}


private List<IMyTerminalBlock> findBlockTags(string TagName) {
   List<IMyTerminalBlock> ret = new List<IMyTerminalBlock>();
   List<IMyTerminalBlock> output = new List<IMyTerminalBlock>();
   GridTerminalSystem.GetBlocksOfType<IMyTerminalBlock>(output);

   foreach(IMyTerminalBlock block in output) {
      IEnumerable<TagInfo> tags = ParseTag(block.CustomData);
      if(tags.Any(p => p.Name == TagName)) {
         ret.Add(block);
      }
   }

   return ret;
}


private string populateDrillProgramDisplayText(List<IMyTerminalBlock> DrillProgramBlocks) {
   StringBuilder sb = new StringBuilder();

   sb.Append($"Drills: ");
   foreach(IMyShipDrill drill in DrillProgramBlocks.OfType<IMyShipDrill>()) {
      sb.Append($"{( drill.Enabled ? " On " : " Off " )}");
   }

   sb.Append($"\r\nRotor: ");
   foreach(IMyMotorAdvancedStator rotor in DrillProgramBlocks.OfType<IMyMotorAdvancedStator>()) {
      double rotoDegrees = (rotor.Angle * (180 / Math.PI)); // convert Angle (radians) to degrees
      sb.Append($"   {rotoDegrees.ToString("n2")}\r\n");
   }

   sb.Append($"\r\n\r\nPistons:\r\n");
   foreach(IMyPistonBase piston in DrillProgramBlocks.OfType<IMyPistonBase>()) {
      sb.Append($"   {piston.CurrentPosition.ToString("n2")}\r\n");
   }

   return sb.ToString();
}

private string populateCargoDisplayText(List<IMyTerminalBlock> WatchedBlocks) {
   MyFixedPoint curVolume = 0;
   MyFixedPoint maxVolume = 0;
   int numContainers = 0;

   foreach(var item in WatchedBlocks.OfType<IMyCargoContainer>()) {
      var inv = item.GetInventory();
      curVolume += inv.CurrentVolume;
      maxVolume += inv.MaxVolume;
      numContainers++;
   }

   return (numContainers>0 ? getPercentBarText("Cargo", numContainers, curVolume, maxVolume, "kL") + "\r\n" : "" )
          ;

}

private string populatePowerDisplayText(List<IMyTerminalBlock> WatchedBlocks) {
   double batteryStored      = 0.0;
   double batteryCapacity    = 0.0;
   int    numBatteries       = 0;

   double solarOutputCurrent = 0.0;
   double solarOutputMax     = 0.0;
   int    numSolarPanels     = 0;

   double windOutputCurrent = 0.0;
   double windOutputMax     = 0.0;
   int    numWindTurbine    = 0;

   foreach(var item in WatchedBlocks.OfType<IMySolarPanel>()) {
      solarOutputCurrent += item.CurrentOutput;
      solarOutputMax += SOLAR_PANEL_MAX;
      numSolarPanels++;
   }

   foreach(var item in WatchedBlocks.OfType<IMyWindTurbine>()) {
      windOutputCurrent += item.CurrentOutput;
      windOutputMax     += item.MaxOutput;
      numWindTurbine++;
   }

   foreach(var item in WatchedBlocks.OfType<IMyBatteryBlock>()) {
      batteryStored += item.CurrentStoredPower;
      batteryCapacity += item.MaxStoredPower;
      numBatteries++;
   }

   
   return (numBatteries>0   ? getPercentBarText("Batteries", numBatteries, batteryStored, batteryCapacity, "MWh") + "\r\n\r\n" : "" ) +
          (numSolarPanels>0 ? getPercentBarText("Solar Panels", numSolarPanels, solarOutputCurrent, solarOutputMax, "MWh") + "\r\n" : "" ) +
          (numWindTurbine>0 ? getPercentBarText("Wind Turine", numWindTurbine, windOutputCurrent, windOutputMax, "MWh") : "" )
          ;
}

private bool isPowerStable(List<IMyTerminalBlock> WatchedBlocks) {
   double batteryOutput = 0.0;
   double batteryInput  = 0.0;

   foreach(var item in WatchedBlocks.OfType<IMyBatteryBlock>()) {
      batteryOutput += item.CurrentOutput;
      batteryInput  += item.CurrentInput;
   }

   return batteryInput >= batteryOutput;
}



private void PopulateDisplay(IMyTextSurface TargetDisplay, string DisplayText) =>
   PopulateDisplay(TargetDisplay, DisplayText, FONT_STYLE_WHITE);

private void PopulateDisplay(IMyTextSurface TargetDisplay, string DisplayText, string FontColor) {
   TargetDisplay.FontSize = FONT_SIZE;
   TargetDisplay.Font = FontColor;

   TargetDisplay.WriteText(DisplayText);
}

private string getPercentBarText(string label, int blockCount, double current, double max, string unit) {
   double percentage = Math.Round((current / max) * 100.0f, 2);
   string text = label;
   if (blockCount > 0) {
      text += $" ({blockCount})";
   }

   text += $": {current.ToString("###,##0.00")}/{max.ToString("###,##0.00")}";
   if (unit.Length > 0) {
      text += $" {unit}";
   }

   text += "\n";

   int bars = (int)Math.Round(percentage);
   text += "[";
   text += new string('|', bars);
   text += new string('\'', 100 - bars);
   text += $"]\n";
//   text += $"] {percentage}%\n";
	
   return text;
}

private string getPercentBarText(string Label, int BlockCount, MyFixedPoint CurrentValue, MyFixedPoint MaxValue, string UnitOfMeasurement) =>
    getPercentBarText(Label, BlockCount, (CurrentValue.RawValue/1000), (MaxValue.RawValue/1000), UnitOfMeasurement);



private string BasePattern = @"\[(.*?)\]";                          // pattern: [{Anything}]
private string Pattern1    = @"\[([^\(|\]]+)\(\)\]";                // pattern: [{Tag}()]
private string Pattern2    = @"\[([^\(|\]]+)\(([^,]+)\)\]";         // pattern: [{Tag}({param1})]
private string Pattern3    = @"\[([^\(|\]]+)\(([^,]+),([^,]+)\)\]"; // pattern: [{Tag}({param1},{param2})]

private List<TagInfo> ParseTag(string tag) {
   List<TagInfo> ret = new List<TagInfo>();

   System.Text.RegularExpressions.MatchCollection rawTags = System.Text.RegularExpressions.Regex.Matches(tag, BasePattern);
   foreach (System.Text.RegularExpressions.Match item in rawTags) {
      var pat1Match = System.Text.RegularExpressions.Regex.Match(item.Value, Pattern1);
      var pat2Match = System.Text.RegularExpressions.Regex.Match(item.Value, Pattern2);
      var pat3Match = System.Text.RegularExpressions.Regex.Match(item.Value, Pattern3);

      if (pat1Match.Success) { 
         ret.Add(new TagInfo() {Name=pat1Match.Groups[1].Value}); 
      }

      if (pat2Match.Success) { 
         TagInfo newItem = new TagInfo() {Name=pat2Match.Groups[1].Value};
         newItem.Params.Add(pat2Match.Groups[2].Value);
         ret.Add(newItem);
      }

      if (pat3Match.Success) { 
         TagInfo newItem = new TagInfo() {Name=pat3Match.Groups[1].Value};
         newItem.Params.Add(pat3Match.Groups[2].Value);
         newItem.Params.Add(pat3Match.Groups[3].Value);
         ret.Add(newItem); 
      }
   }

   return ret;
}
